// Mocks generated by Mockito 5.4.5 from annotations
// in movrap/test/detail_screen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movrap/features/movie/data/data_sources/movie_remote_data_source.dart'
    as _i2;
import 'package:movrap/features/movie/domain/models/movie.dart' as _i3;
import 'package:movrap/features/movie/domain/repositories/movie_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.MovieRemoteDataSource {
  _FakeMovieRemoteDataSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovie_1 extends _i1.SmartFake implements _i3.Movie {
  _FakeMovie_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i4.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRemoteDataSource get movieRemoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#movieRemoteDataSource),
            returnValue: _FakeMovieRemoteDataSource_0(
              this,
              Invocation.getter(#movieRemoteDataSource),
            ),
          )
          as _i2.MovieRemoteDataSource);

  @override
  _i5.Future<List<_i3.Movie>> getPopularMovies({int? page = 1}) =>
      (super.noSuchMethod(
            Invocation.method(#getPopularMovies, [], {#page: page}),
            returnValue: _i5.Future<List<_i3.Movie>>.value(<_i3.Movie>[]),
          )
          as _i5.Future<List<_i3.Movie>>);

  @override
  _i5.Future<List<_i3.Movie>> getTopRatedMovies({int? page = 1}) =>
      (super.noSuchMethod(
            Invocation.method(#getTopRatedMovies, [], {#page: page}),
            returnValue: _i5.Future<List<_i3.Movie>>.value(<_i3.Movie>[]),
          )
          as _i5.Future<List<_i3.Movie>>);

  @override
  _i5.Future<List<_i3.Movie>> searchMovies(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query]),
            returnValue: _i5.Future<List<_i3.Movie>>.value(<_i3.Movie>[]),
          )
          as _i5.Future<List<_i3.Movie>>);

  @override
  _i5.Future<_i3.Movie> getMovieDetails(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieDetails, [movieId]),
            returnValue: _i5.Future<_i3.Movie>.value(
              _FakeMovie_1(
                this,
                Invocation.method(#getMovieDetails, [movieId]),
              ),
            ),
          )
          as _i5.Future<_i3.Movie>);
}
